from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TOKEN, ADMIN
from database.connect import startup_table
from database.operations import Movie, User
from database.commit import create_user, get_movie, create_movie
from states import AdvertisementState, AddMovieState, DeleteMovieState, MovieState
from buttons.reply_keyboard import admin_button, movie_button, exit_button, users_management_button

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
admin = ADMIN


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_created = await create_user(message.from_user.id, message.from_user.username)

    if user_created:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∏–Ω–æ–±–æ—Ç üé•\n\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–∏–Ω–æ —Ñ–∏–ª—å–º—ã —Å —Ç–∏–∫—Ç–æ–∫–∞ –∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞."
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /get_movie –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n\n"
        )
    else:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username}! üéâ\n\n"
        )


@dp.message_handler(commands=['adminPanel'])
async def admin_panel(message: types):
    if message.from_user.id in admin:
        await message.answer(f' –ü—Ä–∏–≤–µ—Ç! {message.from_user.first_name} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!',
                             reply_markup=admin_button())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(Text('–ö–∞—Ç–∞–ª–æ–≥–æ–º —Ñ–∏–ª—å–º–æ–≤'))
async def admin_movie_catalog(message: types):
    if message.from_user.id in admin:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=movie_button())
    else:
        pass


@dp.message_handler(Text('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º'))
async def admin_add_amovie(message: types.Message):
    if message.from_user.id in admin:
        await AddMovieState.media.set()
        await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", reply_markup=exit_button())
    else:
        pass


@dp.message_handler(state=AddMovieState.media, content_types=types.ContentType.ANY)
async def handle_video(msg: types.Message, state: FSMContext):
    try:
        if msg.text == "–ù–∞–∑–∞–¥":
            await msg.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=exit_button())
            await state.finish()
        else:
            async with state.proxy() as data:
                data['file_id'] = msg.video.file_id
                data['caption'] = msg.caption
            await AddMovieState.media_id.set()
            await msg.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ñ–∏–ª—å–º–∞: ", reply_markup=exit_button())
    except:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–ª—å–º!", reply_markup=exit_button())


@dp.message_handler(state=AddMovieState.media_id, content_types=types.ContentType.TEXT)
async def handle_media_id(msg: types.Message, state: FSMContext):
    post_id_text = msg.text.strip()
    try:
        post_id = int(post_id_text)
    except ValueError:

        await msg.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ ID!",
                         reply_markup=exit_button())
        return

    if post_id_text == "–ù–∞–∑–∞–¥":
        await msg.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=movie_button())
        await state.finish()
        return
    movie_exists = get_movie(post_id)
    if not movie_exists:
        async with state.proxy() as data:
            create_movie(post_id=post_id, file_id=data['file_id'], caption=data['caption'])
            await msg.reply(f"–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö \n–ö–æ–¥ —Ñ–∏–ª—å–º–∞: {post_id}", reply_markup=movie_button())
        await state.finish()
    else:
        await msg.reply("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@dp.message_handler(Text('–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º'))
async def delete_movie(message: types.Message):
    if message.from_user.id in admin:
        await DeleteMovieState.post_id.set()
        await message.answer('–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ñ–∏–ª—å–º–∞:', reply_markup=exit_button())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


@dp.message_handler(state=DeleteMovieState.post_id)
async def process_delete_movie(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=movie_button())
        await state.finish()
    else:
        response = Movie.delete_movie(int(message.text))
        await message.answer(response, reply_markup=movie_button())
        await state.finish()


@dp.message_handler(Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º'))
async def edit_movie(message: types.Message):
    movies_count = Movie.get_movie_count()
    await message.answer(f"–í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ: {movies_count}")

    all_movies = Movie.get_all_movies()
    response = "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ:\n\n"
    for movie in all_movies:
        response += f"ID: {movie['id']}, Caption: {movie['caption']}, POST_ID: {'post_id'}\n\n\n"

    await message.answer(response)

    popular_movies = Movie.get_popular_movies(limit=5)
    response = "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n\n"
    for movie in popular_movies:
        response += f"{movie['caption']} - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {movie['views']}\n\n\n"

    await message.answer(response)


@dp.message_handler(Text('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
async def admin_user_management(message: types.Message):
    if message.from_user.id in admin:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=users_management_button())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@dp.message_handler(lambda message: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É' in message.text, state='*')
async def advertisement_start(message: types.Message):
    await AdvertisementState.waiting_for_ad.set()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.', reply_markup=exit_button())


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"), state=AdvertisementState.waiting_for_ad)
async def back_to_menu_advertisement(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_button())


@dp.message_handler(content_types=['text', 'photo', 'video'], state=AdvertisementState.waiting_for_ad)
async def send_advertisement(message: types.Message, state: FSMContext):
    users = User.get_all()
    for user in users:
        try:
            if message.content_type == 'text':
                await bot.send_message(chat_id=user['user_id'], text=message.text)
            elif message.content_type == 'photo':
                await bot.send_photo(chat_id=user['user_id'], photo=message.photo[-1].file_id,
                                     caption=message.caption)
            elif message.content_type == 'video':
                await bot.send_video(chat_id=user['user_id'], video=message.video.file_id, caption=message.caption)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É {user['user_id']}: {e}")
    await state.finish()
    await message.answer('–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')


@dp.message_handler(Text('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'))
async def user_management(message: types.Message):
    users = User.get_all()
    usernames = [f"@{user['username']}" for user in users]
    usernames_text = '\n'.join(usernames)
    await message.answer(f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n{usernames_text}")


@dp.message_handler(Text('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
async def block_user_management(message: types.Message):
    await message.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞')


@dp.message_handler(Text('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
async def unblock_user_management(message: types.Message):
    await message.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞')


# @dp.message_handler(Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'))
# async def statistics_and_analytics(message: types.Message):
#     await message.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞')


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in admin:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_button())
    else:
        pass


@dp.message_handler(commands=['get_movie'], state="*")
async def command_get_movie(message: types.Message, state: FSMContext):
    await MovieState.waiting_for_movie_code.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.")


@dp.message_handler(lambda message: message.text.isdigit(), state=MovieState.waiting_for_movie_code)
async def send_movie_by_code(message: types.Message, state: FSMContext):
    movie_data = get_movie(int(message.text))
    if movie_data:
        try:
            await bot.send_video(chat_id=message.from_user.id, video=movie_data[0],
                                 caption=f"{movie_data[1]}\n\nü§ñ –ù–∞—à –±–æ—Ç: @CinemaKeybot")
            await state.finish()
        except Exception as e:
            print(e)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.finish()
    else:
        await message.reply(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.finish()


@dp.message_handler(lambda message: True)
async def handle_all_messages(message: types.Message):
    if '/get_movie' not in message.text:
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã /get_movie.")


async def startup(dp):
    startup_table()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=startup, skip_updates=True)
